// Vertex Shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec2 tex;

uniform mat4 ModelViewProjectionMatrix;
uniform mat3 TextureMatrix;

varying vec2 vTexCoord;

void main() {
    // Transform texture coordinates
    vec3 transformedTex = TextureMatrix * vec3(tex, 1.0);
    vTexCoord = transformedTex.xy;

    // Calculate the vertex position
    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}`;

// Fragment Shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform sampler2D iTMU0; // Texture 0
uniform sampler2D iTMU1; // Texture 1

varying vec2 vTexCoord;

void main() {
    // Sample both textures and blend them equally
    vec4 texColor0 = texture2D(iTMU0, vTexCoord);
    vec4 texColor1 = texture2D(iTMU1, vTexCoord);

    // Blend the colors from both textures
    gl_FragColor = 0.5 * texColor0 + 0.5 * texColor1;
}`;
